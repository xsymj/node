//
// Autogenerated by Thrift Compiler (0.9.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;

var ttypes = require('./ThriftSourceProtocol_types');
//HELPER FUNCTIONS AND STRUCTURES

ThriftSourceProtocol_append_args = function(args) {
  this.event = null;
  if (args) {
    if (args.event !== undefined) {
      this.event = args.event;
    }
  }
};
ThriftSourceProtocol_append_args.prototype = {};
ThriftSourceProtocol_append_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.event = new ttypes.ThriftFlumeEvent();
        this.event.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftSourceProtocol_append_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftSourceProtocol_append_args');
  if (this.event !== null && this.event !== undefined) {
    output.writeFieldBegin('event', Thrift.Type.STRUCT, 1);
    this.event.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftSourceProtocol_append_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ThriftSourceProtocol_append_result.prototype = {};
ThriftSourceProtocol_append_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftSourceProtocol_append_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftSourceProtocol_append_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftSourceProtocol_appendBatch_args = function(args) {
  this.events = null;
  if (args) {
    if (args.events !== undefined) {
      this.events = args.events;
    }
  }
};
ThriftSourceProtocol_appendBatch_args.prototype = {};
ThriftSourceProtocol_appendBatch_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size10 = 0;
        var _rtmp314;
        this.events = [];
        var _etype13 = 0;
        _rtmp314 = input.readListBegin();
        _etype13 = _rtmp314.etype;
        _size10 = _rtmp314.size;
        for (var _i15 = 0; _i15 < _size10; ++_i15)
        {
          var elem16 = null;
          elem16 = new ttypes.ThriftFlumeEvent();
          elem16.read(input);
          this.events.push(elem16);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftSourceProtocol_appendBatch_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftSourceProtocol_appendBatch_args');
  if (this.events !== null && this.events !== undefined) {
    output.writeFieldBegin('events', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.events.length);
    for (var iter17 in this.events)
    {
      if (this.events.hasOwnProperty(iter17))
      {
        iter17 = this.events[iter17];
        iter17.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftSourceProtocol_appendBatch_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ThriftSourceProtocol_appendBatch_result.prototype = {};
ThriftSourceProtocol_appendBatch_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftSourceProtocol_appendBatch_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftSourceProtocol_appendBatch_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftSourceProtocolClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this.seqid = 0;
    this._reqs = {};
};
ThriftSourceProtocolClient.prototype = {};
ThriftSourceProtocolClient.prototype.append = function(event, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_append(event);
};

ThriftSourceProtocolClient.prototype.send_append = function(event) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('append', Thrift.MessageType.CALL, this.seqid);
  var args = new ThriftSourceProtocol_append_args();
  args.event = event;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftSourceProtocolClient.prototype.recv_append = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftSourceProtocol_append_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('append failed: unknown result');
};
ThriftSourceProtocolClient.prototype.appendBatch = function(events, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_appendBatch(events);
};

ThriftSourceProtocolClient.prototype.send_appendBatch = function(events) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('appendBatch', Thrift.MessageType.CALL, this.seqid);
  var args = new ThriftSourceProtocol_appendBatch_args();
  args.events = events;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftSourceProtocolClient.prototype.recv_appendBatch = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftSourceProtocol_appendBatch_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('appendBatch failed: unknown result');
};
ThriftSourceProtocolProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
ThriftSourceProtocolProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.Exception, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

ThriftSourceProtocolProcessor.prototype.process_append = function(seqid, input, output) {
  var args = new ThriftSourceProtocol_append_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.append(args.event, function (err, result) {
    var result = new ThriftSourceProtocol_append_result((err != null ? err : {success: result}));
    output.writeMessageBegin("append", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ThriftSourceProtocolProcessor.prototype.process_appendBatch = function(seqid, input, output) {
  var args = new ThriftSourceProtocol_appendBatch_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.appendBatch(args.events, function (err, result) {
    var result = new ThriftSourceProtocol_appendBatch_result((err != null ? err : {success: result}));
    output.writeMessageBegin("appendBatch", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

